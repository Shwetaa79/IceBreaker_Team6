from kivy.app import App
from kivy.uix.camera import Camera
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
import cv2
import numpy as np
import glob
import math

class CFEVideoConf(object):
    
    STD_DIMENSIONS =  {
        "360p": (480, 360),
        "480p": (640, 480),
        "720p": (1280, 720),
        "1080p": (1920, 1080),
        "4k": (3840, 2160),
    }

    VIDEO_TYPE = {
        'avi': cv2.VideoWriter_fourcc(*'XVID'),
        'mp4': cv2.VideoWriter_fourcc(*'XVID'),
    }

    width           = 640
    height          = 480
    dims            = (640, 480)
    capture         = None
    video_type      = None
    def __init__(self, capture, filepath, res="480p", *args, **kwargs):
        self.capture = capture
        self.filepath = filepath
        self.width, self.height = self.get_dims(res=res)

    def change_res(self, width, height):
        self.capture.set(3, width)
        self.capture.set(4, height)

    def get_dims(self, res='480p'):
        width, height = self.STD_DIMENSIONS['480p']
        if res in self.STD_DIMENSIONS:
            width, height = self.STD_DIMENSIONS[res]
        self.change_res(width, height)
        self.dims = (width, height)
        return width, height
    
class CameraApp(App):


    def build(self):
        '''
        
        :return:
        '''



        self.camera_obj = Camera()
        self.camera_obj.resolution = (800,800)
        
        #button_for_capturing_image
        button1 = Button(text = "Capture!",size_hint= (.5, .2),pos_hint = {'x':.25, 'y':.25})
        #button_obj.size_hint= (.5, .2)
        #button_obj.pos_hint = {'x':.25, 'y':.25}
        button1.bind(on_press = self.take_image)


        #button_for_scanning_qr_code
        button2 = Button(text = "QR code scan!",size_hint= (.5, .2),pos_hint = {'x':.25, 'y':.25})
        #button_obj.size_hint= (.5, .2)
        #button_obj.pos_hint = {'x':.25, 'y':.25}
        button2.bind(on_press = self.QR_code)

        #button_for_applying_filter
        button3 = Button(text = "Apply filter!",size_hint= (.5, .2),pos_hint = {'x':.25, 'y':.25})
        #button_obj.size_hint= (.5, .2)
        #button_obj.pos_hint = {'x':.25, 'y':.25}
        button3.bind(on_press = self.apply_filter)


        #Layout
        layout = BoxLayout()
        layout.add_widget(self.camera_obj)
        layout.add_widget(button1)
        layout.add_widget(button2)
        layout.add_widget(button3)
        return layout


    def take_image(self, *args):
        print("Picture is being captured!")
        self.camera_obj.export_to_png("./selfie.png")

    def QR_code(self, *args):
        #print("QR code is being detected!")
        vid = cv2.VideoCapture(0)
        qrCodeDetector = cv2.QRCodeDetector()
        while True:
                ret,frame=vid.read()
                cv2.imshow('frame',frame)
                decodedText, points, _ = qrCodeDetector.detectAndDecode(frame)
                if points is not None:
    # QR Code detected handling code
                        print(decodedText)
                else:
                        print("QR code not detected")	
                #if cv2.waitKey(1) & 0xFF==ord('q'):
                        #break
        vid.release()

    

    def apply_filter(self, *args):
        cap = cv2.VideoCapture(0)
        frames_per_seconds = 20
        save_path = 'saved-media/filter.mp4'
        config=CFEVideoConf(cap,filepath=save_path,res='480p')
        while(True):
            ret,frame=cap.read()
            #cv2.imshow('Normal Camera',frame) 
            cv2.imshow('Inverted Image',cv2.bitwise_not(frame))
        '''if cv2.waitKey(20) & 0xFF == ord('q'):
            break'''

        cap.release()

if __name__=='__main__':
    CameraApp().run()
